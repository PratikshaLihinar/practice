Why to use char[] array over a string for storing passwords in Java?
Difficulty Level : Medium
Last Updated : 24 Sep, 2021
1. Strings are immutable:  Strings are immutable in Java and therefore if a password is stored as plain text it will be available in memory until Garbage collector clears it and as Strings are used in String pool for re-usability there are high chances that it will remain in memory for long duration, which is a security threat. Strings are immutable and there is no way that the content of Strings can be changed because any change will produce new String. 
With an array, the data can be wiped explicitly data after its work is complete. The array can be overwritten and the password won’t be present anywhere in the system, even before garbage collection.

2. Security: Any one who has access to memory dump can find the password in clear text and that’s another reason to use encrypted password than plain text.  So Storing password in character array clearly mitigates security risk of stealing password. 

3. Log file safety: With an array, one can explicitly wipe the data , overwrite the array and the password won’t be present anywhere in the system. 
With plain String, there are much higher chances of accidentally printing the password to logs, monitors or some other insecure place. char[] is less vulnerable.


//Java program to illustrate preferring char[] arrays
//over strings for passwords in Java
public class PasswordPreference
{
  
    public static void main(String[] args)
    {
  
        String strPwd = "password";
        char[] charPwd = new char[] {'p','a','s','s','w','o','r','d'};
         
        System.out.println("String password: " + strPwd );
        System.out.println("Character password: " + charPwd );
    }
}
Output: 

String password: password
Character password: [C@15db9742
4. Java Recommendation: Java has methods like JPasswordField of javax.swing as the method public String getText() which returns String is Deprecated from Java 2 and is replaced by public char[] getPassword() which returns Char Array.






Maximum sum of hour glass in matrix
Difficulty Level : Easy
Last Updated : 28 Jan, 2022
Given a 2D matrix, the task is to find the maximum sum of an hourglass.

An hour glass is made of 7 cells
in following form.
    A B C
      D
    E F G
Examples: 

Input : 1 1 1 0 0 
        0 1 0 0 0 
        1 1 1 0 0 
        0 0 0 0 0 
        0 0 0 0 0 
Output : 7
Below is the hour glass with
maximum sum:
1 1 1 
  1
1 1 1
                                                      
Input : 0 3 0 0 0
        0 1 0 0 0
        1 1 1 0 0
        0 0 2 4 4
        0 0 0 2 4
Output : 11
Below is the hour glass with
maximum sum
1 0 0
  4
0 2 4
Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.
Approach:
It is evident from the definition of the hourglass that the number of rows and number of columns must be equal to 3. If we count the total number of hourglasses in a matrix, we can say that the count is equal to the count of possible top left cells in an hourglass. The number of top-left cells in an hourglass is equal to (R-2)*(C-2). Therefore, in a matrix total number of an hourglass is (R-2)*(C-2).

mat[][] = 2 3 0 0 0 
          0 1 0 0 0
          1 1 1 0 0 
          0 0 2 4 4
          0 0 0 2 0
Possible hour glass are :
2 3 0  3 0 0   0 0 0  
  1      0       0 
1 1 1  1 1 0   1 0 0 

0 1 0  1 0 0  0 0 0 
  1      1      0  
0 0 2  0 2 4  2 4 4 

1 1 1  1 1 0  1 0 0
  0      2      4
0 0 0  0 0 2  0 2 0
Consider all top left cells of hourglasses one by one. For every cell, we compute the sum of the hourglass formed by it. Finally, return the maximum sum.
Below is the implementation of the above idea:


// Java program to find maximum
// sum of hour glass in matrix
import java.io.*;
 
class GFG {
     
static int R = 5;
static int C = 5;
 
// Returns maximum sum of
// hour glass in ar[][]
static int findMaxSum(int [][]mat)
{
    if (R < 3 || C < 3)
        return -1;
 
    // Here loop runs (R-2)*(C-2)
    // times considering different
    // top left cells of hour glasses.
    int max_sum = Integer.MIN_VALUE;
    for (int i = 0; i < R - 2; i++)
    {
        for (int j = 0; j < C - 2; j++)
        {
            // Considering mat[i][j] as top
            // left cell of hour glass.
            int sum = (mat[i][j] + mat[i][j + 1] +
                       mat[i][j + 2]) + (mat[i + 1][j + 1]) +
                       (mat[i + 2][j] + mat[i + 2][j + 1] +
                       mat[i + 2][j + 2]);
 
            // If previous sum is less then
            // current sum then update
            // new sum in max_sum
            max_sum = Math.max(max_sum, sum);
        }
    }
    return max_sum;
}
 
    // Driver code
    static public void main (String[] args)
    {
        int [][]mat = {{1, 2, 3, 0, 0},
                       {0, 0, 0, 0, 0},
                       {2, 1, 4, 0, 0},
                       {0, 0, 0, 0, 0},
                       {1, 1, 0, 1, 0}};
        int res = findMaxSum(mat);
        if (res == -1)
            System.out.println("Not possible");
        else
            System.out.println("Maximum sum of hour glass = "
                                + res);
    }
     
}
 
// This code is contributed by vt_m .





which is faster Java or JavaScript? And why!

-